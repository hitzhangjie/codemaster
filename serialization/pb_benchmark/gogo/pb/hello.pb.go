// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hello.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HelloRequest struct {
	F1                   string          `protobuf:"bytes,1,opt,name=f1,proto3" json:"f1,omitempty"`
	F2                   int32           `protobuf:"varint,2,opt,name=f2,proto3" json:"f2,omitempty"`
	F3                   uint32          `protobuf:"varint,3,opt,name=f3,proto3" json:"f3,omitempty"`
	F4                   int64           `protobuf:"varint,4,opt,name=f4,proto3" json:"f4,omitempty"`
	F5                   uint64          `protobuf:"varint,5,opt,name=f5,proto3" json:"f5,omitempty"`
	F6                   bool            `protobuf:"varint,6,opt,name=f6,proto3" json:"f6,omitempty"`
	F7                   []byte          `protobuf:"bytes,7,opt,name=f7,proto3" json:"f7,omitempty"`
	F8                   map[int32]int32 `protobuf:"bytes,8,rep,name=f8,proto3" json:"f8,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Tips                 []*Tip          `protobuf:"bytes,9,rep,name=tips,proto3" json:"tips,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{0}
}
func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return m.Size()
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetF1() string {
	if m != nil {
		return m.F1
	}
	return ""
}

func (m *HelloRequest) GetF2() int32 {
	if m != nil {
		return m.F2
	}
	return 0
}

func (m *HelloRequest) GetF3() uint32 {
	if m != nil {
		return m.F3
	}
	return 0
}

func (m *HelloRequest) GetF4() int64 {
	if m != nil {
		return m.F4
	}
	return 0
}

func (m *HelloRequest) GetF5() uint64 {
	if m != nil {
		return m.F5
	}
	return 0
}

func (m *HelloRequest) GetF6() bool {
	if m != nil {
		return m.F6
	}
	return false
}

func (m *HelloRequest) GetF7() []byte {
	if m != nil {
		return m.F7
	}
	return nil
}

func (m *HelloRequest) GetF8() map[int32]int32 {
	if m != nil {
		return m.F8
	}
	return nil
}

func (m *HelloRequest) GetTips() []*Tip {
	if m != nil {
		return m.Tips
	}
	return nil
}

type HelloResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResponse) Reset()         { *m = HelloResponse{} }
func (m *HelloResponse) String() string { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()    {}
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{1}
}
func (m *HelloResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResponse.Merge(m, src)
}
func (m *HelloResponse) XXX_Size() int {
	return m.Size()
}
func (m *HelloResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResponse proto.InternalMessageInfo

type Tip struct {
	F1                   string          `protobuf:"bytes,1,opt,name=f1,proto3" json:"f1,omitempty"`
	F2                   int32           `protobuf:"varint,2,opt,name=f2,proto3" json:"f2,omitempty"`
	F3                   uint32          `protobuf:"varint,3,opt,name=f3,proto3" json:"f3,omitempty"`
	F4                   int64           `protobuf:"varint,4,opt,name=f4,proto3" json:"f4,omitempty"`
	F5                   uint64          `protobuf:"varint,5,opt,name=f5,proto3" json:"f5,omitempty"`
	F6                   bool            `protobuf:"varint,6,opt,name=f6,proto3" json:"f6,omitempty"`
	F7                   []byte          `protobuf:"bytes,7,opt,name=f7,proto3" json:"f7,omitempty"`
	F8                   map[int32]int32 `protobuf:"bytes,8,rep,name=f8,proto3" json:"f8,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Tip) Reset()         { *m = Tip{} }
func (m *Tip) String() string { return proto.CompactTextString(m) }
func (*Tip) ProtoMessage()    {}
func (*Tip) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{2}
}
func (m *Tip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tip.Merge(m, src)
}
func (m *Tip) XXX_Size() int {
	return m.Size()
}
func (m *Tip) XXX_DiscardUnknown() {
	xxx_messageInfo_Tip.DiscardUnknown(m)
}

var xxx_messageInfo_Tip proto.InternalMessageInfo

func (m *Tip) GetF1() string {
	if m != nil {
		return m.F1
	}
	return ""
}

func (m *Tip) GetF2() int32 {
	if m != nil {
		return m.F2
	}
	return 0
}

func (m *Tip) GetF3() uint32 {
	if m != nil {
		return m.F3
	}
	return 0
}

func (m *Tip) GetF4() int64 {
	if m != nil {
		return m.F4
	}
	return 0
}

func (m *Tip) GetF5() uint64 {
	if m != nil {
		return m.F5
	}
	return 0
}

func (m *Tip) GetF6() bool {
	if m != nil {
		return m.F6
	}
	return false
}

func (m *Tip) GetF7() []byte {
	if m != nil {
		return m.F7
	}
	return nil
}

func (m *Tip) GetF8() map[int32]int32 {
	if m != nil {
		return m.F8
	}
	return nil
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "hello.HelloRequest")
	proto.RegisterMapType((map[int32]int32)(nil), "hello.HelloRequest.F8Entry")
	proto.RegisterType((*HelloResponse)(nil), "hello.HelloResponse")
	proto.RegisterType((*Tip)(nil), "hello.Tip")
	proto.RegisterMapType((map[int32]int32)(nil), "hello.Tip.F8Entry")
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor_61ef911816e0a8ce) }

var fileDescriptor_61ef911816e0a8ce = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x86, 0x39, 0x27, 0x49, 0x7f, 0xa6, 0xed, 0xf7, 0xc9, 0xd8, 0xc5, 0x50, 0x21, 0x0c, 0x59,
	0x0d, 0x08, 0x91, 0xa6, 0x7f, 0xc1, 0x65, 0x41, 0x71, 0x3d, 0x76, 0xe5, 0xce, 0xca, 0x0c, 0x06,
	0x4b, 0x33, 0x36, 0x69, 0xa1, 0x5b, 0xaf, 0xce, 0x65, 0x2f, 0x41, 0x7a, 0x25, 0xd2, 0xd3, 0x80,
	0x15, 0x5c, 0xb9, 0x70, 0x77, 0x9e, 0xc3, 0x0b, 0x39, 0xef, 0x93, 0x61, 0xad, 0x67, 0xb3, 0x58,
	0xe4, 0xb1, 0x5b, 0xe5, 0x65, 0xce, 0x03, 0x82, 0xe8, 0x0d, 0x59, 0xfb, 0xee, 0x30, 0x69, 0xf3,
	0xba, 0x36, 0x45, 0xc9, 0xff, 0x31, 0xb4, 0x7d, 0x01, 0x12, 0x54, 0x53, 0xa3, 0xed, 0x13, 0x27,
	0x02, 0x25, 0xa8, 0x40, 0xa3, 0x4d, 0x88, 0x07, 0xc2, 0x93, 0xa0, 0x3a, 0x1a, 0xed, 0x80, 0x78,
	0x28, 0x7c, 0x09, 0xca, 0xd3, 0x68, 0x87, 0xc4, 0x23, 0x11, 0x48, 0x50, 0xbe, 0x46, 0x3b, 0x22,
	0x1e, 0x8b, 0x9a, 0x04, 0xd5, 0xd0, 0x68, 0xc7, 0xc4, 0x13, 0x51, 0x97, 0xa0, 0xda, 0x1a, 0xed,
	0x84, 0x5f, 0x32, 0xb4, 0xa9, 0x68, 0x48, 0x4f, 0xb5, 0x92, 0x8b, 0xf8, 0x78, 0xe1, 0xe9, 0x41,
	0xf1, 0x6d, 0x7a, 0xb3, 0x2c, 0x57, 0x5b, 0x8d, 0x36, 0xe5, 0x21, 0xf3, 0xcb, 0xcc, 0x15, 0xa2,
	0x49, 0x71, 0x56, 0xc5, 0x67, 0x99, 0xd3, 0xb4, 0xef, 0x8d, 0x58, 0xbd, 0x8a, 0xf3, 0x33, 0xe6,
	0xbd, 0x98, 0x2d, 0x15, 0x09, 0xf4, 0x61, 0xe4, 0x5d, 0x16, 0x6c, 0x1e, 0x17, 0x6b, 0x53, 0x95,
	0x39, 0xc2, 0x35, 0xa6, 0x10, 0xfd, 0x67, 0x9d, 0xea, 0x93, 0x85, 0xcb, 0x97, 0x85, 0x89, 0x76,
	0xc0, 0xbc, 0x59, 0xe6, 0xfe, 0x5c, 0x46, 0x74, 0x22, 0x83, 0x7f, 0xb5, 0x3b, 0x75, 0xf0, 0xcb,
	0x8e, 0xc9, 0xb4, 0xfa, 0xcf, 0xf7, 0x66, 0xb5, 0xc9, 0x9e, 0x0c, 0x4f, 0x58, 0x40, 0xcc, 0xcf,
	0x7f, 0x90, 0xde, 0xeb, 0x7e, 0x5f, 0x1e, 0xb5, 0x4c, 0xf9, 0xfb, 0x3e, 0x84, 0xdd, 0x3e, 0x84,
	0x8f, 0x7d, 0x08, 0x0f, 0x7e, 0x7c, 0xe5, 0xe6, 0xf3, 0x1a, 0x3d, 0xa7, 0xc1, 0x67, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc3, 0xe7, 0x71, 0xdb, 0x5d, 0x02, 0x00, 0x00,
}

func (m *HelloRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tips) > 0 {
		for iNdEx := len(m.Tips) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tips[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHello(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.F8) > 0 {
		for k := range m.F8 {
			v := m.F8[k]
			baseI := i
			i = encodeVarintHello(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintHello(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHello(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.F7) > 0 {
		i -= len(m.F7)
		copy(dAtA[i:], m.F7)
		i = encodeVarintHello(dAtA, i, uint64(len(m.F7)))
		i--
		dAtA[i] = 0x3a
	}
	if m.F6 {
		i--
		if m.F6 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.F5 != 0 {
		i = encodeVarintHello(dAtA, i, uint64(m.F5))
		i--
		dAtA[i] = 0x28
	}
	if m.F4 != 0 {
		i = encodeVarintHello(dAtA, i, uint64(m.F4))
		i--
		dAtA[i] = 0x20
	}
	if m.F3 != 0 {
		i = encodeVarintHello(dAtA, i, uint64(m.F3))
		i--
		dAtA[i] = 0x18
	}
	if m.F2 != 0 {
		i = encodeVarintHello(dAtA, i, uint64(m.F2))
		i--
		dAtA[i] = 0x10
	}
	if len(m.F1) > 0 {
		i -= len(m.F1)
		copy(dAtA[i:], m.F1)
		i = encodeVarintHello(dAtA, i, uint64(len(m.F1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HelloResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Tip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.F8) > 0 {
		for k := range m.F8 {
			v := m.F8[k]
			baseI := i
			i = encodeVarintHello(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintHello(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHello(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.F7) > 0 {
		i -= len(m.F7)
		copy(dAtA[i:], m.F7)
		i = encodeVarintHello(dAtA, i, uint64(len(m.F7)))
		i--
		dAtA[i] = 0x3a
	}
	if m.F6 {
		i--
		if m.F6 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.F5 != 0 {
		i = encodeVarintHello(dAtA, i, uint64(m.F5))
		i--
		dAtA[i] = 0x28
	}
	if m.F4 != 0 {
		i = encodeVarintHello(dAtA, i, uint64(m.F4))
		i--
		dAtA[i] = 0x20
	}
	if m.F3 != 0 {
		i = encodeVarintHello(dAtA, i, uint64(m.F3))
		i--
		dAtA[i] = 0x18
	}
	if m.F2 != 0 {
		i = encodeVarintHello(dAtA, i, uint64(m.F2))
		i--
		dAtA[i] = 0x10
	}
	if len(m.F1) > 0 {
		i -= len(m.F1)
		copy(dAtA[i:], m.F1)
		i = encodeVarintHello(dAtA, i, uint64(len(m.F1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHello(dAtA []byte, offset int, v uint64) int {
	offset -= sovHello(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HelloRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.F1)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	if m.F2 != 0 {
		n += 1 + sovHello(uint64(m.F2))
	}
	if m.F3 != 0 {
		n += 1 + sovHello(uint64(m.F3))
	}
	if m.F4 != 0 {
		n += 1 + sovHello(uint64(m.F4))
	}
	if m.F5 != 0 {
		n += 1 + sovHello(uint64(m.F5))
	}
	if m.F6 {
		n += 2
	}
	l = len(m.F7)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	if len(m.F8) > 0 {
		for k, v := range m.F8 {
			_ = k
			_ = v
			mapEntrySize := 1 + sovHello(uint64(k)) + 1 + sovHello(uint64(v))
			n += mapEntrySize + 1 + sovHello(uint64(mapEntrySize))
		}
	}
	if len(m.Tips) > 0 {
		for _, e := range m.Tips {
			l = e.Size()
			n += 1 + l + sovHello(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HelloResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.F1)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	if m.F2 != 0 {
		n += 1 + sovHello(uint64(m.F2))
	}
	if m.F3 != 0 {
		n += 1 + sovHello(uint64(m.F3))
	}
	if m.F4 != 0 {
		n += 1 + sovHello(uint64(m.F4))
	}
	if m.F5 != 0 {
		n += 1 + sovHello(uint64(m.F5))
	}
	if m.F6 {
		n += 2
	}
	l = len(m.F7)
	if l > 0 {
		n += 1 + l + sovHello(uint64(l))
	}
	if len(m.F8) > 0 {
		for k, v := range m.F8 {
			_ = k
			_ = v
			mapEntrySize := 1 + sovHello(uint64(k)) + 1 + sovHello(uint64(v))
			n += mapEntrySize + 1 + sovHello(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHello(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHello(x uint64) (n int) {
	return sovHello(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HelloRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F2", wireType)
			}
			m.F2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F3", wireType)
			}
			m.F3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F3 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F4", wireType)
			}
			m.F4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F4 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5", wireType)
			}
			m.F5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F5 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F6", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.F6 = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F7", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F7 = append(m.F7[:0], dAtA[iNdEx:postIndex]...)
			if m.F7 == nil {
				m.F7 = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F8", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.F8 == nil {
				m.F8 = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHello
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHello
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHello
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHello(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHello
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.F8[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tips = append(m.Tips, &Tip{})
			if err := m.Tips[len(m.Tips)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F2", wireType)
			}
			m.F2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F3", wireType)
			}
			m.F3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F3 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F4", wireType)
			}
			m.F4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F4 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5", wireType)
			}
			m.F5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.F5 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F6", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.F6 = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F7", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F7 = append(m.F7[:0], dAtA[iNdEx:postIndex]...)
			if m.F7 == nil {
				m.F7 = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F8", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHello
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.F8 == nil {
				m.F8 = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHello
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHello
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHello
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHello(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHello
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.F8[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHello(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHello
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHello
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHello
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHello
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHello
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHello
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHello        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHello          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHello = fmt.Errorf("proto: unexpected end of group")
)
